name: Main

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  REGISTRY: ghcr.io
  IMAGE_NAME: steward-omni-max

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma:generate

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Run tests
        run: pnpm test

      - name: Build all packages
        run: pnpm build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-web
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-api
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Broker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/broker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-broker
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docs image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/docs/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-docs
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-web
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner on API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-api
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Upload Trivy API scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-api-results.sarif'

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate SBOM for Web image
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-web
          format: cyclonedx-json
          output-file: sbom-web.json

      - name: Generate SBOM for API image
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-api
          format: cyclonedx-json
          output-file: sbom-api.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: |
            sbom-web.json
            sbom-api.json
          retention-days: 90

  sign:
    name: Sign Images
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sign Web image
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.1.1'

      - name: Sign Web image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-web

      - name: Sign API image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-api

      - name: Sign Broker image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-broker

      - name: Sign Docs image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-docs

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, sign]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker-compose -f docker-compose.prod.yml run --rm api pnpm prisma migrate deploy
            docker-compose -f docker-compose.prod.yml run --rm api pnpm prisma db seed

      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ secrets.DEPLOY_HOST }}/health || exit 1

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, sign, deploy]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'main~1',
              head: 'main'
            });
            
            const changelog = commits.commits
              .map(commit => `- ${commit.commit.message}`)
              .join('\n');
            
            return changelog;

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            
            ${{ steps.changelog.outputs.result }}
            
            ## Docker Images
            
            - Web: `${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-web`
            - API: `${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-api`
            - Broker: `${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-broker`
            - Docs: `${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image-tag }}-docs`
            
            ## Security
            
            All images have been scanned for vulnerabilities and signed with Cosign.
          draft: false
          prerelease: false
