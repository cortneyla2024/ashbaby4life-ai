version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: steward
      POSTGRES_PASSWORD: steward
      POSTGRES_DB: steward
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U steward"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Local AI
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://steward:steward@postgres:5432/steward?schema=public
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://steward:steward@postgres:5432/steward?schema=public
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Documentation
  docs:
    build:
      context: .
      dockerfile: apps/docs/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Job Broker
  broker:
    build:
      context: .
      dockerfile: apps/broker/Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://steward:steward@postgres:5432/steward?schema=public
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional Services (Free Profile)
  # WebDAV Server
  webdav:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./infra/webdav/nginx.conf:/etc/nginx/nginx.conf
      - webdav_data:/var/www/html
    profiles:
      - free

  # CalDAV/CardDAV Server
  radicale:
    image: tomsquest/docker-radicale:latest
    ports:
      - "5232:5232"
    volumes:
      - radicale_data:/data
    profiles:
      - free

  # Matrix Server
  matrix:
    image: matrixdotorg/synapse:latest
    ports:
      - "8008:8008"
    volumes:
      - matrix_data:/data
    environment:
      - SYNAPSE_SERVER_NAME=localhost
      - SYNAPSE_REPORT_STATS=no
    profiles:
      - free

  # Gitea (Git Server)
  gitea:
    image: gitea/gitea:latest
    ports:
      - "3002:3000"
    volumes:
      - gitea_data:/data
    environment:
      - GITEA__database__DB_TYPE=sqlite3
      - GITEA__database__PATH=/data/gitea.db
    profiles:
      - free

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - free

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    profiles:
      - free

  # Loki (Log Aggregation)
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    profiles:
      - free

  # Home Assistant
  homeassistant:
    image: homeassistant/home-assistant:latest
    ports:
      - "8123:8123"
    volumes:
      - homeassistant_data:/config
    profiles:
      - free

  # Valhalla (Routing)
  valhalla:
    image: valhalla/valhalla:latest
    ports:
      - "8002:8002"
    volumes:
      - valhalla_data:/valhalla
    profiles:
      - free

  # Nominatim (Geocoding)
  nominatim:
    image: mediagis/nominatim:latest
    ports:
      - "8001:8080"
    volumes:
      - nominatim_data:/var/lib/postgresql/14/main
    environment:
      - PBF_URL=https://download.geofabrik.de/north-america/us/new-york-latest.osm.pbf
      - REPLICATION_URL=https://download.geofabrik.de/north-america/us/new-york-updates/
    profiles:
      - free

  # Uptime Kuma
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    ports:
      - "3004:3001"
    volumes:
      - uptime_kuma_data:/app/data
    profiles:
      - free

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  webdav_data:
  radicale_data:
  matrix_data:
  gitea_data:
  prometheus_data:
  grafana_data:
  loki_data:
  homeassistant_data:
  valhalla_data:
  nominatim_data:
  uptime_kuma_data:
