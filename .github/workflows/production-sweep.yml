name: Production Sweep - Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  prebuild-check:
    name: Prebuild Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: |
          cd apps/web
          pnpm run lint

      - name: Type check
        run: |
          cd apps/web
          pnpm run type-check

      - name: Check for dead code
        run: |
          cd apps/web
          npx ts-prune --error

      - name: Validate package integrity
        run: |
          pnpm audit --audit-level=moderate
          pnpm outdated

  runtime-resilience:
    name: Runtime Resilience Tests
    runs-on: ubuntu-latest
    needs: prebuild-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run runtime resilience tests
        run: |
          cd apps/web
          pnpm test -- __tests__/runtimeResilience.test.ts --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/lcov.info
          flags: runtime-resilience
          name: runtime-resilience-coverage

  privacy-security:
    name: Privacy & Security Audit
    runs-on: ubuntu-latest
    needs: prebuild-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run privacy security tests
        run: |
          cd apps/web
          pnpm test -- __tests__/privacySecurityAudit.test.ts --coverage

      - name: Security audit
        run: |
          pnpm audit --audit-level=high
          npx snyk test --severity-threshold=high

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/lcov.info
          flags: privacy-security
          name: privacy-security-coverage

  empathy-engine:
    name: Empathy Engine Tests
    runs-on: ubuntu-latest
    needs: prebuild-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run empathy engine tests
        run: |
          cd apps/web
          pnpm test -- __tests__/empathyEngine.test.ts --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/lcov.info
          flags: empathy-engine
          name: empathy-engine-coverage

  regression-tests:
    name: Full Regression Test Suite
    runs-on: ubuntu-latest
    needs: [prebuild-check, runtime-resilience, privacy-security, empathy-engine]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run all tests
        run: |
          cd apps/web
          pnpm test --coverage --watchAll=false

      - name: Check test coverage
        run: |
          cd apps/web
          if [ $(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct)") -lt 95 ]; then
            echo "Test coverage is below 95%"
            exit 1
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/lcov.info
          flags: regression-tests
          name: regression-tests-coverage

  build-test:
    name: Build & Deploy Simulation
    runs-on: ubuntu-latest
    needs: regression-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: |
          cd apps/web
          pnpm run build

      - name: Test build output
        run: |
          cd apps/web
          if [ ! -d ".next" ]; then
            echo "Build failed - .next directory not found"
            exit 1
          fi

      - name: Validate bundle size
        run: |
          cd apps/web
          npx @next/bundle-analyzer .next/static/chunks --out-dir ./bundle-analysis

  feature-integrity:
    name: Feature Integrity Check
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check required modules exist
        run: |
          required_modules=(
            "apps/web/app/medical/page.tsx"
            "apps/web/app/family/page.tsx"
            "apps/web/app/education/page.tsx"
            "apps/web/app/creativity/page.tsx"
            "apps/web/app/governance/page.tsx"
            "apps/web/app/social-hub/page.tsx"
            "apps/web/app/finance/page.tsx"
            "apps/web/app/health/page.tsx"
            "apps/web/app/marketplace/page.tsx"
            "apps/web/app/ai-assistant/page.tsx"
          )
          
          for module in "${required_modules[@]}"; do
            if [ ! -f "$module" ]; then
              echo "Required module missing: $module"
              exit 1
            fi
          done
          echo "All required modules present"

      - name: Check API endpoints exist
        run: |
          required_apis=(
            "apps/web/app/api/auth/login/route.ts"
            "apps/web/app/api/finance/transaction/route.ts"
            "apps/web/app/api/finance/budget/route.ts"
            "apps/web/app/api/mental-health/mood/route.ts"
            "apps/web/app/api/ai/chat/route.ts"
            "apps/web/app/api/user/profile/route.ts"
          )
          
          for api in "${required_apis[@]}"; do
            if [ ! -f "$api" ]; then
              echo "Required API endpoint missing: $api"
              exit 1
            fi
          done
          echo "All required API endpoints present"

  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start development server
        run: |
          cd apps/web
          pnpm run dev &
          sleep 30

      - name: Run performance tests
        run: |
          cd apps/web
          npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json

      - name: Check performance scores
        run: |
          cd apps/web
          node -e "
            const report = require('./lighthouse-report.json');
            const scores = report.lhr.categories;
            const performance = scores.performance.score * 100;
            const accessibility = scores.accessibility.score * 100;
            const bestPractices = scores['best-practices'].score * 100;
            const seo = scores.seo.score * 100;
            
            console.log('Performance Score:', performance);
            console.log('Accessibility Score:', accessibility);
            console.log('Best Practices Score:', bestPractices);
            console.log('SEO Score:', seo);
            
            if (performance < 90 || accessibility < 90 || bestPractices < 90 || seo < 90) {
              console.error('Performance scores below threshold');
              process.exit(1);
            }
          "

  marketplace-validation:
    name: Marketplace & Extensibility Test
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check marketplace structure
        run: |
          if [ ! -d "apps/web/app/marketplace" ]; then
            echo "Marketplace directory missing"
            exit 1
          fi
          
          if [ ! -f "apps/web/app/marketplace/page.tsx" ]; then
            echo "Marketplace page missing"
            exit 1
          fi
          
          echo "Marketplace structure validated"

      - name: Check plugin system
        run: |
          if [ ! -d "apps/web/components/plugins" ]; then
            echo "Plugin components directory missing"
            exit 1
          fi
          
          echo "Plugin system validated"

  production-readiness:
    name: Production Readiness Report
    runs-on: ubuntu-latest
    needs: [regression-tests, feature-integrity, performance-test, marketplace-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate production readiness report
        run: |
          echo "# Production Readiness Report" > production-readiness-report.md
          echo "Generated: $(date)" >> production-readiness-report.md
          echo "" >> production-readiness-report.md
          echo "## Test Results" >> production-readiness-report.md
          echo "- ✅ Prebuild validation: PASSED" >> production-readiness-report.md
          echo "- ✅ Runtime resilience: PASSED" >> production-readiness-report.md
          echo "- ✅ Privacy & security: PASSED" >> production-readiness-report.md
          echo "- ✅ Empathy engine: PASSED" >> production-readiness-report.md
          echo "- ✅ Regression tests: PASSED" >> production-readiness-report.md
          echo "- ✅ Build test: PASSED" >> production-readiness-report.md
          echo "- ✅ Feature integrity: PASSED" >> production-readiness-report.md
          echo "- ✅ Performance test: PASSED" >> production-readiness-report.md
          echo "- ✅ Marketplace validation: PASSED" >> production-readiness-report.md
          echo "" >> production-readiness-report.md
          echo "## Status: ✅ PRODUCTION READY" >> production-readiness-report.md

      - name: Upload production readiness report
        uses: actions/upload-artifact@v3
        with:
          name: production-readiness-report
          path: production-readiness-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🎉 Production Sweep Complete!\n\n✅ All tests passed\n✅ Build successful\n✅ Performance validated\n✅ Security audited\n✅ Features verified\n\n**Status: PRODUCTION READY** 🚀'
            })
